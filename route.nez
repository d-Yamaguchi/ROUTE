chunk = { S*  $(decl)  ('\n' [ \t]* S+ $(decl))* S* #Source}
decl = iodecl / funcdecl / vardecl

//iodecl's structure
iodecl = in / out
in = { 'cin' _ '>>' _ $target(name) #In}
out = { 'cout' _ '<<' _ $target(value) #Out}

//funcdecl's leftside tree
funcdecl = { $name(name) '(' _ $arglist(arglistbase) _ ')' _ ( $return(returnlistbase)ã€€'\n' )? $othwiseret(othwiseret) $where(whereblock)? #Funcdecl}
name = { !keyword ([a-z] / [A-Z])+ ([0-9] / [a-z] / [A-Z] / '_')* #Name}
arglistbase = !(name _ ','_){$arglist(name) #Arglist}/arglist
arglist = name {$left _ ',' _ $right(arglist) #Arglist}?
arglist2 = value {$left _ ',' _ $right(arglist2) #ArglistII}*
returnlistbase = !(return _ '\n'returnlist){$return(return) #Returnlist}/returnlist
returnlist = return {$left '\n' $right(returnlist) #Returnlist}*
return = { _ '=' _ $retval(value) _ '[' _ $retcase(returncase) _ ']' #Return}
othwiseret = { _ '=' _ $retval(value) ( _ '['_ 'otherwise' _ ']' )? #OthWiseRet}
//needless? change to <returncase = !(numeral / '-')exp>
returncase = exp {$left _ ',' _ $right(exp) #Returncase}*
whereblock = { '\n' _ 'where' _ $declist(declistbase) #Where}
declistbase = !((vardecl / funcdecl) _ '\n'_(vardecl / funcdecl)){$declist((vardecl / funcdecl)) #declist}/declist
declist = (vardecl / funcdecl) {$left '\n' _ $right( vardecl / funcdecl ) #Declist}*

//functioncall
funcCall = { $name(name) '(' _ $arglist(arglist2) _ ')' #FuncCall}

//value
value = exp

//vardecl tree
vardecl = { $name(name) _ '=' _  $value(value) #Vardecl}

exp = exp0 {$left ( _ ('&&' #And / '||' #Or) _ $right(exp0)) }*
exp0 = exp1 {$left ( _ ('==' #Equals / '!=' #NotEquals) _ $right(exp1)) }*
exp1 = exp6 {$left ( _ ('<=' #LessThanEquals / '<' #LessThan / '>=' #GreaterThanEquals / '>' #GreaterThan) _ $right(exp6)) }*
exp6 = exp7 {$left ( _ ('+' #Add) _ $right(exp7)) }*
exp7 = exps {$left ( _ ('*' #Mul) _ $right(exps)) }*
exps = false / true / numeral / funcCall / name / { $(unop) $(exp) #Unop}

unop = {'-' #Minus} / {'!' #Not}

//tarminal element
numeral = integer
integer = {([1-9] [0-9]* / '0') #Int}
false = {'false' #False}
true = {'true' #True}

// keywords
keyword = 'otherwise' / 'Int'/ 'Bool' / 'nil' / 'true' / 'false' / 'where' / 'cin' / 'cout'

S = [ \t\n\r]
_ = [ \t]*
